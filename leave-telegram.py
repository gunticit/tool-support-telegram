import os
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.contacts import BlockRequest
from telethon.tl.functions.messages import DeleteHistoryRequest
from telethon.tl.functions.channels import LeaveChannelRequest, EditBannedRequest, InviteToChannelRequest
from telethon.tl.types import ChatBannedRights
from telethon.errors import UserIdInvalidError, UserNotParticipantError
import asyncio
from getpass import getpass


load_dotenv()

api_id = os.getenv('api_id')
api_hash = os.getenv('api_hash')

if not api_id or not api_hash:
    print("‚ùå Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng api_id v√† api_hash trong file .env")
    exit(1)

api_id = int(api_id)
phone_number = input("üì± Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n (vd: +84901234567): ")
client = TelegramClient(StringSession(), api_id, api_hash)

async def main():
    try:
        await client.start(
            phone=lambda: phone_number,
            code_callback=lambda: input("üîê Nh·∫≠p m√£ x√°c th·ª±c Telegram g·ª≠i v·ªÅ: "),
            password=lambda: getpass("üîë Nh·∫≠p m·∫≠t kh·∫©u 2 b∆∞·ªõc (n·∫øu c√≥, Enter n·∫øu kh√¥ng): ")
        )
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p: {e}")
        return

    print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
    session_str = client.session.save()
    print(f"üîë Chu·ªói session:\n{session_str}")

    while True:
        print("\nüìã Ch·ªçn ch·ª©c nƒÉng:")
        print("1. R·ªùi kh·ªèi t·∫•t c·∫£ nh√≥m/k√™nh")
        print("2. Th√™m ng∆∞·ªùi d√πng v√†o nh√≥m/k√™nh")
        print("3. X√≥a ng∆∞·ªùi d√πng kh·ªèi nh√≥m/k√™nh")
        print("4. Ch·∫∑n ng∆∞·ªùi d√πng kh·ªèi nh√≥m/k√™nh")
        print("5. X√≥a t·∫•t c·∫£ bot kh·ªèi m·ªôt nh√≥m/k√™nh")
        print("6. T·ª± ƒë·ªông block t·∫•t c·∫£ bot trong c√°c nh√≥m/k√™nh")
        print("7. T·ª± ƒë·ªông block v√† xo√° t·∫•t c·∫£ bot (tr√≤ chuy·ªán ri√™ng)")
        print("8. Tho√°t")

        choice = input("üëâ Nh·∫≠p l·ª±a ch·ªçn: ").strip()

        if choice == "1":
            dialogs = await client.get_dialogs()
            count = 0
            for dialog in dialogs:
                if dialog.is_group or dialog.is_channel:
                    try:
                        print(f"üö™ ƒêang r·ªùi kh·ªèi: {dialog.name}")
                        await client(LeaveChannelRequest(dialog.entity))
                        count += 1
                    except Exception as e:
                        print(f"‚ùå Kh√¥ng th·ªÉ r·ªùi {dialog.name}: {e}")
            print(f"üéâ ƒê√£ r·ªùi kh·ªèi {count} nh√≥m/k√™nh.")

        elif choice == "2":
            group = input("üìõ Nh·∫≠p username ho·∫∑c ID nh√≥m: ")
            user = input("üë§ Nh·∫≠p username ho·∫∑c ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m: ")
            try:
                entity = await client.get_entity(group)
                user_to_add = await client.get_entity(user)
                await client(InviteToChannelRequest(channel=entity, users=[user_to_add]))
                print("‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng.")
            except Exception as e:
                print(f"‚ùå L·ªói khi th√™m ng∆∞·ªùi d√πng: {e}")

        elif choice == "3":
            group = input("üìõ Nh·∫≠p username ho·∫∑c ID nh√≥m: ")
            user = input("üë§ Nh·∫≠p username ho·∫∑c ID ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a: ")
            try:
                entity = await client.get_entity(group)
                user_to_kick = await client.get_entity(user)
                rights = ChatBannedRights(until_date=None, view_messages=True)
                await client(EditBannedRequest(entity, user_to_kick, rights))
                print("‚úÖ ƒê√£ x√≥a ng∆∞·ªùi d√πng kh·ªèi nh√≥m.")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng: {e}")

        elif choice == "4":
            group = input("üìõ Nh·∫≠p username ho·∫∑c ID nh√≥m: ")
            user = input("üë§ Nh·∫≠p username ho·∫∑c ID ng∆∞·ªùi d√πng ƒë·ªÉ ch·∫∑n: ")
            try:
                entity = await client.get_entity(group)
                user_to_ban = await client.get_entity(user)
                rights = ChatBannedRights(
                    until_date=None,
                    view_messages=True,
                    send_messages=True,
                    send_media=True,
                    send_stickers=True,
                    send_gifs=True,
                    send_games=True,
                    send_inline=True,
                    embed_links=True
                )
                await client(EditBannedRequest(entity, user_to_ban, rights))
                print("‚úÖ ƒê√£ ch·∫∑n ng∆∞·ªùi d√πng.")
            except Exception as e:
                print(f"‚ùå L·ªói khi ch·∫∑n ng∆∞·ªùi d√πng: {e}")

        elif choice == "5":
            group = input("üìõ Nh·∫≠p username ho·∫∑c ID nh√≥m: ")
            try:
                entity = await client.get_entity(group)
                participants = await client.get_participants(entity)
                bot_count = 0

                for user in participants:
                    if user.bot:
                        try:
                            rights = ChatBannedRights(until_date=None, view_messages=True)
                            await client(EditBannedRequest(entity, user, rights))
                            print(f"ü¶æ ƒê√£ x√≥a bot: {user.username or user.id}")
                            bot_count += 1
                        except Exception as e:
                            print(f"‚ùå Kh√¥ng th·ªÉ x√≥a bot {user.username or user.id}: {e}")

                print(f"‚úÖ ƒê√£ x√≥a {bot_count} bot kh·ªèi nh√≥m.")
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω nh√≥m: {e}")

        elif choice == "6":
            dialogs = await client.get_dialogs()
            total_blocked = 0
            total_groups = 0

            for dialog in dialogs:
                if dialog.is_group or dialog.is_channel:
                    group = dialog.entity
                    try:
                        participants = await client.get_participants(group)
                        blocked_in_group = 0

                        for user in participants:
                            if user.bot:
                                try:
                                    rights = ChatBannedRights(
                                        until_date=None,
                                        view_messages=True,
                                        send_messages=True,
                                        send_media=True,
                                        send_stickers=True,
                                        send_gifs=True,
                                        send_games=True,
                                        send_inline=True,
                                        embed_links=True
                                    )
                                    await client(EditBannedRequest(group, user, rights))
                                    print(f"‚úÖ Bot b·ªã block trong {dialog.name}: {user.username or user.id}")
                                    blocked_in_group += 1
                                except Exception as e:
                                    print(f"‚ùå Kh√¥ng th·ªÉ block bot {user.username or user.id} trong {dialog.name}: {e}")
                        if blocked_in_group > 0:
                            total_groups += 1
                            total_blocked += blocked_in_group
                    except Exception as e:
                        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p nh√≥m {dialog.name}: {e}")

            print(f"\nüéâ ƒê√£ ch·∫∑n {total_blocked} bot trong {total_groups} nh√≥m/k√™nh.")
        
        elif choice == "7":
            print("üöÄ ƒêang qu√©t v√† xo√° t·ª´ng l√¥ 100 bot...")

            processed_ids = set()
            batch_size = 100
            pause_seconds = 300  # 5 ph√∫t

            while True:
                dialogs = await client.get_dialogs()
                bots_to_process = []

                for dialog in dialogs:
                    entity = dialog.entity
                    if (
                        hasattr(entity, 'bot') and entity.bot
                        and not (dialog.is_group or dialog.is_channel)
                        and entity.id not in processed_ids
                    ):
                        bots_to_process.append(entity)

                if not bots_to_process:
                    print("üéâ Kh√¥ng c√≤n bot n√†o ƒë·ªÉ x·ª≠ l√Ω.")
                    break

                batch = bots_to_process[:batch_size]
                print(f"\n‚öôÔ∏è ƒêang x·ª≠ l√Ω {len(batch)} bot...")

                for bot in batch:
                    try:
                        # Block bot
                        await client(BlockRequest(bot.id))

                        # Delete chat
                        await client(DeleteHistoryRequest(
                            peer=bot,
                            max_id=0,
                            revoke=True
                        ))

                        print(f"‚úÖ ƒê√£ block & xo√° chat v·ªõi bot: {bot.username or bot.id}")
                        processed_ids.add(bot.id)
                    except Exception as e:
                        print(f"‚ùå L·ªói khi x·ª≠ l√Ω bot {bot.username or bot.id}: {e}")
                        processed_ids.add(bot.id)  # ƒê√°nh d·∫•u ƒë√£ th·ª≠, kh√¥ng l·∫∑p l·∫°i

                if len(batch) < batch_size:
                    print("üéØ ƒê√£ x·ª≠ l√Ω to√†n b·ªô bot hi·ªán t·∫°i.")
                    break

                print(f"‚è≥ ƒê·ª£i {pause_seconds} gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c...")
                await asyncio.sleep(pause_seconds)

        elif choice == "8":
            print("üëã T·∫°m bi·ªát!")
            break

        else:
            print("‚ùó L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")

    await client.disconnect()

asyncio.run(main())
